import Graphics2D;
import ImageResources;
import Random;
import Audio;

const PLAYER_START_X = 30;
const PLAYER_START_Y = 150;
const TRANSITION = 70;

class Town {
	
	field mainMenu;
	field mouse;
	field player;
	field bg;
	field x = 0;
	field y = 0;
	
	field npc;
	field npc2;
	field npc3;
	field npc4;
	
	field wait = 0;
	field waitNPC;
	
	field wasMouseDown = false;
	
	field hint;
	
	field sound;
	
	constructor(mainRef) {
		this.mainMenu = mainRef;
		this.mouse = mainRef.mouse;
		this.player = mainRef.player;
		this.player.x = PLAYER_START_X;
		this.player.y = PLAYER_START_Y;
		this.bg = GraphicsTexture.load(ImageLoader.loadFromResources("town/town.png"));
		this.hint = GraphicsTexture.load(ImageLoader.loadFromResources("town/hint.png"));
		this.sound = Audio.SoundResource.loadFromResource("audio/BattleTransition.ogg"); 
		
		rand = Random.randomInt(0, this.mainMenu.npcs.length);
		this.npc = this.mainMenu.npcs[rand];
		this.npc.x = 600;
		this.npc.y = 200;
		
		rando = Random.randomInt(0, this.mainMenu.npcs.length);
		while(rando == rand)
			rando = Random.randomInt(0, this.mainMenu.npcs.length);
		this.npc2 = this.mainMenu.npcs[rando];
		this.npc2.x = 720;
		this.npc2.y = 500;
		
		random1 = Random.randomInt(0, this.mainMenu.npcs.length);
		while(random1 == rando || random1 == rand)
			random1 = Random.randomInt(0, this.mainMenu.npcs.length);
		this.npc3 = this.mainMenu.npcs[random1];
		this.npc3.x = 1050;
		this.npc3.y = 600;
		
		random2 = Random.randomInt(0, this.mainMenu.npcs.length);
		while(random2 == random1 || random2 == rando || random2 == rand)
			random2 = Random.randomInt(0, this.mainMenu.npcs.length);
		this.npc4 = this.mainMenu.npcs[random2];
		this.npc4.x = 200;
		this.npc4.y = 900;
	}
	
	function onGameLoop() {
		Draw.fill(245, 245, 245);
		
		this.updateCamera();
		
		if(!this.mouse.isDown && this.wasMouseDown) {
			this.player.goto(this.mouse.x - this.x, this.mouse.y - this.y);
			this.hint = null;
		}
		
		this.bg.draw(this.x, this.y);
		this.npc.onGameLoop(this.x, this.y);
		this.npc2.onGameLoop(this.x, this.y);
		this.npc3.onGameLoop(this.x, this.y);
		this.npc4.onGameLoop(this.x, this.y);
		this.player.onGameLoop(this.x, this.y);

		if(this.wait > 0) {
			this.wait--;
			if(this.wait <= 0) {
				this.mainMenu.gotoBattle(this.player, this.waitNPC);
				this.waitNPC.x = -300;
				this.waitNPC.y = -300;
			}
		} else {
			this.updateNPC(this.npc);
			this.updateNPC(this.npc2);
			this.updateNPC(this.npc3);
			this.updateNPC(this.npc4);
		}
			
		if(this.hint != null)
			this.hint.draw(0, WIN_HEIGHT - this.hint.height);
		
		this.wasMouseDown = this.mouse.isDown;
	}
	
	function updateCamera() {
		this.x = WIN_WIDTH / 2 - (this.player.x + this.player.width / 2);
		this.y = WIN_HEIGHT / 2 - (this.player.y + this.player.height / 2);
		if(this.x + this.bg.width < WIN_WIDTH)
			this.x = WIN_WIDTH - this.bg.width;
		if(this.x > 0)
			this.x = 0;
		if(this.y + this.bg.height < WIN_HEIGHT)
			this.y = WIN_HEIGHT - this.bg.height;
		if(this.y > 0)
			this.y = 0;
	}
	
	function updateNPC(npc) {
		if(this.player.intersects(npc)) {
			this.wait = TRANSITION;
			this.sound.play();
			this.waitNPC = npc;
		}
	}
}